{"version":3,"sources":["utils/constants.ts","reducers/postReducer/postReducer.ts","auth/fakeAuth.ts","auth/useAuthProvider.ts","auth/AuthProvider.tsx","api/api.ts","Routes.tsx","components/Notification/NotificationAlert.tsx","components/Notification/NotificationQueue.tsx","App.tsx","reportWebVitals.ts","sagas/postSaga/postSaga.ts","sagas/index.ts","reducers/index.ts","store.ts","index.tsx","reducers/notificationReducer/notificationReducer.ts"],"names":["constants","apiRoutes","fetchPost","routes","homePage","login","postPage","lazyImage","noMatch","PostActionTypes","fetchPostRequest","payload","type","FETCH_POST_REQUEST","fetchPostSuccess","FETCH_POST_SUCCESS","fetchPostFailure","FETCH_POST_FAILURE","initialState","posts","error","postLoading","state","actions","pending","push","fakeAuth","signIn","cb","setTimeout","signOut","useAuthProvider","useState","user","setUser","AuthContext","createContext","AuthProvider","children","auth","Provider","value","handleTextResponse","response","text","then","ok","Promise","reject","status","statusText","err","handleResponse","contentType","headers","get","includes","json","Object","assign","handleJSONResponse","resolve","Error","GET","url","fetch","data","catch","PostPage","lazy","LazyImages","HomePage","NoMatch","LoginPage","PrivateRoute","Routes","path","component","NotificationAlert","props","show","setShow","Alert","className","variant","level","NotificationLevel","Success","Warning","Info","variantFromLevel","notification","onClose","dismissible","message","id","NotificationQueue","alertsToShow","useSelector","selectUnreadNotifications","filter","index","maxAlerts","dispatch","useDispatch","handleOnCloseOrHide","toggleNotificationRead","reverse","map","onHide","name","App","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fetchPostSaga","watchFetchPostSaga","rootSaga","action","call","api","postId","res","console","log","put","addNotification","errorMessage","toString","takeLatest","all","fork","postSaga","allReducers","combineReducers","notifications","rootReducer","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","NotificationActionTypes","ADD_NOTIFICATION","TOGGLE_NOTIFICATION_READ","nextTodoId","read","newNotifications"],"mappings":"6HAceA,IAbG,CAChBC,UAAW,CACTC,UAAW,+CAEbC,OAAQ,CACNC,SAAU,YACVC,MAAO,SACPC,SAAU,YACVC,UAAW,aACXC,QAAS,O,4KCLDC,E,0BAAAA,K,wCAAAA,E,wCAAAA,E,yCAAAA,M,KAUL,IAAMC,EAAmB,SAACC,GAAD,MAAyB,CACvDC,KAAMH,EAAgBI,mBACtBF,YAIWG,EAAmB,SAACH,GAAD,MAAwB,CACtDC,KAAMH,EAAgBM,mBACtBJ,YAMWK,EAAmB,SAACL,GAAD,MAAoC,CAClEC,KAAMH,EAAgBQ,mBACtBN,YAUIO,EAA0B,CAC9BC,MAAO,GACPC,MAAO,KACPC,YAAa,MAgCAF,IA5BD,WAAoD,IAAnDG,EAAkD,uDAA/BJ,EAAcK,EAAiB,uCAC/D,OAAOA,EAAQX,MACb,KAAKH,EAAgBI,mBACrB,OAAO,2BACFS,GADL,IAEEE,SAAS,IAEX,KAAKf,EAAgBM,mBACrB,IAAMI,EAAK,YAAOG,EAAMH,OAExB,OADAA,EAAMM,KAAKF,EAAQZ,SACZ,2BACFW,GADL,IAEEH,MAAOA,EACPE,aAAa,EACbD,MAAO,OAET,KAAKX,EAAgBQ,mBACrB,OAAO,2BACFK,GADL,IAEEF,MAAOG,EAAQZ,QAAQS,QAEzB,QACA,OAAO,eACFE,M,qFC9DMI,EATE,CACfC,OADe,SACRC,GACLC,WAAWD,EAAI,MAEjBE,QAJe,SAIPF,GACNC,WAAWD,EAAI,OC0BJG,EAtBS,WACtB,MAAwBC,mBAAwB,MAAhD,mBAAOC,EAAP,KAAaC,EAAb,KAcA,MAAO,CACLD,OACAN,OAfa,SAACC,GACdF,EAASC,QAAO,WACdO,EAAQ,OACRN,QAaFE,QAVc,SAACF,GACfF,EAASI,SAAQ,WACfI,EAAQ,MACRN,U,OCjBOO,EAAcC,wBAAuC,MAOnDC,IALgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1BC,EAAOR,IACb,OAAO,cAACI,EAAYK,SAAb,CAAsBC,MAAOF,EAA7B,SAAoCD,M,gCCS7C,SAASI,EAAmBC,GAC1B,OAAOA,EAASC,OAAOC,MAAK,SAACD,GAC3B,OAAID,EAASG,GACJF,EAEFG,QAAQC,OAAO,CACpBC,OAAQN,EAASM,OACjBC,WAAYP,EAASO,WACrBC,IAAKP,OAKX,SAASQ,EAAeT,GACtB,IAAMU,EAAcV,EAASW,QAAQC,IAAI,gBACzC,GAAIF,EAAYG,SAAS,oBACvB,OA9BJ,SAA4Bb,GAC1B,OAAOA,EAASc,OAAOZ,MAAK,SAACY,GAC3B,OAAId,EAASG,GACJW,EAEFV,QAAQC,OACbU,OAAOC,OAAO,GAAIF,EAAM,CACtBR,OAAQN,EAASM,OACjBC,WAAYP,EAASO,iBAsBlBU,CAAmBjB,GACrB,GAAIU,EAAYG,SAAS,aAC9B,OAAOd,EAAmBC,GACrB,GAAIU,EAAYG,SAAS,cAC9B,OAAOd,EAAmBC,GACrB,GAAoB,OAAhBU,EACT,OAAON,QAAQc,QAAQ,MAGzB,MAAM,IAAIC,MAAJ,8BAAiCT,EAAjC,mBAzCR,kCA4CO,IAAMU,EAAM,SAACC,GAAD,OACjBC,MAAMD,EAAK,IAGRnB,KAAKO,GACLP,MAAK,SAAAqB,GAAI,OAAIA,KACbC,OAAM,SAAA/C,GAAK,OAAIA,O,2GC/CdgD,EAAWC,gBAAK,kBAAM,gCACtBC,EAAYD,gBAAK,kBAAM,gCACvBE,EAAWF,gBAAK,kBAAM,gCACtBG,EAAUH,gBAAK,kBAAM,gCACrBI,EAAYJ,gBAAK,kBAAM,gCACvBK,EAAeL,gBAAK,kBAAM,gCAwBjBM,EAtBA,WACb,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAM5E,IAAUG,OAAOC,SAA9B,SACE,cAACmE,EAAD,MAEF,cAAC,IAAD,CAAOK,KAAM5E,IAAUG,OAAOE,MAA9B,SACE,cAACoE,EAAD,MAEF,cAAC,IAAD,CAAOG,KAAM5E,IAAUG,OAAOI,UAA9B,SACE,cAAC+D,EAAD,MAEF,cAACI,EAAD,CAAcE,KAAM5E,IAAUG,OAAOG,SAArC,SACE,cAAC8D,EAAD,MAEF,cAAC,IAAD,CAAOQ,KAAM5E,IAAUG,OAAOK,QAASqE,UAAWL,U,6CCsBzCM,MAtCjB,SAA2BC,GACvB,MAAwB/C,oBAAS,GAAjC,mBAAOgD,EAAP,KAAaC,EAAb,KAwBA,OACE,cAACC,EAAA,EAAD,CAEEC,UAAU,UACVH,KAAMA,EACNI,QA5BqB,SAACC,GACxB,OAAOA,GACL,KAAKC,IAAkBC,QACrB,MAAO,UAET,KAAKD,IAAkBE,QACrB,MAAO,UAET,KAAKF,IAAkBxB,MACrB,MAAO,SAET,KAAKwB,IAAkBG,KACvB,QACE,MAAO,QAeAC,CAAiBX,EAAMY,aAAaN,OAC7CO,QAAS,kBAVXX,GAAQ,QACRF,EAAMa,WAUJC,aAAW,EANb,SAOGd,EAAMY,aAAaG,SANff,EAAMY,aAAaI,K,MCLjBC,MArBf,SAA2BjB,GACzB,IACMkB,EADmCC,YAAYC,eAChBC,QAAO,SAACT,EAA4BU,GAA7B,OAA+CA,EAAQtB,EAAMuB,aACnGC,EAAWC,cACXC,EAAsB,SAACd,GAC3BY,EAASG,YAAuBf,EAAaI,MAE/C,OACE,qBAAKZ,UAAU,oBAAf,SACGc,EAAaU,UAAUC,KAAI,SAAAjB,GAAY,OACtC,cAAC,EAAD,CAEEA,aAAcA,EACdC,QAAS,kBAAMa,EAAoBd,IACnCkB,OAAQ,kBAAMJ,EAAoBd,KAH7BA,EAAaI,UCXtB9D,EAAO,CACX8D,GAAI,EACJe,KAAM,UAEK3E,EAAcC,wBAA2B,MAcvC2E,IAbf,WACE,OACE,eAAC,WAAD,CAAUC,SAAU,6CAApB,UACE,cAAC,EAAD,CAAmBV,UAAW,IAC9B,cAACnE,EAAYK,SAAb,CAAsBC,MAAOR,EAA7B,SACE,cAACI,EAAA,EAAD,UACE,cAAC,EAAD,a,mKCRK4E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtE,MAAK,YAAkD,IAA/CuE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,2FCDJO,G,WAkBOC,G,WAIQC,GAtBzB,SAAUF,EAAcG,GAAxB,yEAE0B,OAF1B,kBAEgCC,YAAKC,IAAD,UAAa9H,IAAUC,UAAUC,UAAjC,YAA8C0H,EAAOjH,QAAQoH,SAFjG,UAEUC,EAFV,OAGIC,QAAQC,IAAI,MAAOF,KAChBA,GAAOA,EAAI/E,QAAU+E,EAAI/E,OAAS,KAJzC,iBAKM,OALN,SAKYkF,YAAIC,YAAgB,uBAAwB9C,IAAkBxB,QAL1E,OAMM,OANN,UAMYqE,YAAI5G,IAAyB,CAACH,MAAM,GAAD,OAAK4G,EAAI/E,WANxD,gCAQM,OARN,UAQYkF,YAAI5G,IAAyByG,IARzC,gCAYI,OAZJ,0BAWUK,EAAgB,KAAMvC,QAAU,KAAMA,QAAQwC,WAAa,GAXrE,UAYUH,YAAIC,YAAgBC,EAAc/C,IAAkBxB,QAZ9D,QAaI,OAbJ,UAaUqE,YAAI5G,IAAyB,CAACH,MAAK,QAb7C,QAcI,OAdJ,UAcU6G,QAAQC,IAAR,MAdV,sDAkBO,SAAUR,IAAV,iEACL,OADK,SACCa,YAAWhH,IAAwBV,mBAAoB4G,GADxD,uCAIQ,SAAUE,IAAV,iEACb,OADa,SACPa,YAAI,CACRC,YAAKf,KAFM,uC,eC3BUC,GAAV,SAAUA,IAAV,iEACb,OADa,SACPa,YAAI,CACRC,YAAKC,KAFM,uCCCf,IAAMC,EAAcC,0BAAgB,CAClCzH,UACA0H,oBAcaC,EAPK,SAACxH,EAAoCsG,GAEvD,OAAOe,EAAYrH,EAAOsG,ICTtBmB,EAAiBC,cACjBC,EAAQC,sBAAYJ,EAAaK,8BAAoBC,0BAAgBL,KAC3EA,EAAeM,IAAI1B,GACJsB,Q,OCDfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAClC,EAAA,EAAD,QAGJ0C,SAASC,eAAe,SAM1BzC,K,+BCnBO,IAAK3B,EAcPqE,EAdL,wI,SAAYrE,K,kBAAAA,E,cAAAA,E,kBAAAA,E,aAAAA,M,cAcPqE,K,oCAAAA,E,qDAAAA,M,KAKE,IAAMvB,EAAkB,SAACC,EAAmBhD,GAApB,MAAkD,CAC/EzE,KAAM+I,EAAwBC,iBAC9BvB,eACAhD,UAGWqB,EAAyB,SAACX,GAAD,MAAiB,CACrDnF,KAAM+I,EAAwBE,yBAC9B9D,OAGI7E,EAAgC,GAElC4I,EAAa,EAyBJ3D,EAA4B,WACvC,OAAO,SAAC7E,GAAD,OAAsCA,EAAMuH,cAAczC,QAAO,SAACT,GAAD,OAAiCA,EAAaoE,UAGzGlB,IA5BO,WAA6D,IAA5DvH,EAA2D,uDAA9BJ,EAAc0G,EAAgB,uCAChF,OAAOA,EAAOhH,MACZ,KAAK+I,EAAwBC,iBAC7B,IAAMjE,EAA6B,CACjCI,GAAI,GAAK+D,IACThE,QAAS8B,EAAOS,aAChBhD,MAAOuC,EAAOvC,MACd0E,MAAM,GAGR,OADAzI,EAAMG,KAAKkE,GACJrE,EAEP,KAAKqI,EAAwBE,yBAC7B,IAAMG,EAAmB1I,EAAMsF,KAAI,SAAAjB,GAIjC,OAHGA,EAAaI,KAAO6B,EAAO7B,KAC5BJ,EAAaoE,MAAQpE,EAAaoE,MAE7BpE,KAET,OAAOqE,EACP,QACA,OAAO9I,M","file":"static/js/main.961e218f.chunk.js","sourcesContent":["\nconst constants = {\n  apiRoutes: {\n    fetchPost: 'https://jsonplaceholder.typicode.com/todos/'\n  },\n  routes: {\n    homePage: '/homePage',\n    login: '/login',\n    postPage: '/postPage',\n    lazyImage: '/lazyimage',\n    noMatch: '*'\n  }\n}\n\nexport default constants;","import { PostType } from \"../../types/post\";\n\n\n\n//Plan to use redux toolkit to remove saga and all\nexport enum PostActionTypes {\n  FETCH_POST_REQUEST = \"FETCH_POST_REQUEST\",\n  FETCH_POST_SUCCESS = \"FETCH_POST_SUCCESS\",\n  FETCH_POST_FAILURE = \"FETCH_POST_FAILURE\" \n}\n\ninterface FetchPost {\n  postId: number\n}\n\nexport const fetchPostRequest = (payload: FetchPost) => ({\n  type: PostActionTypes.FETCH_POST_REQUEST,\n  payload\n});\n\n\nexport const fetchPostSuccess = (payload: PostType) => ({\n  type: PostActionTypes.FETCH_POST_SUCCESS,\n  payload\n});\n\ninterface FetchPostErrorPayoad {\n  error: null | string | Object\n}\nexport const fetchPostFailure = (payload: FetchPostErrorPayoad) => ({\n  type: PostActionTypes.FETCH_POST_FAILURE,\n  payload\n});\n\n\nexport interface PostStore {\n  posts: Array<PostType>,\n  error: null | string | Object,\n  postLoading: null | boolean\n}\n\nconst initialState: PostStore = {\n  posts: [],\n  error: null,\n  postLoading: null\n}\n\n\nconst posts = (state: PostStore = initialState, actions: any) => {\n  switch(actions.type) {\n    case PostActionTypes.FETCH_POST_REQUEST:\n    return {\n      ...state,\n      pending: true\n    }\n    case PostActionTypes.FETCH_POST_SUCCESS:\n    const posts = [...state.posts];\n    posts.push(actions.payload)\n    return {\n      ...state,\n      posts: posts,\n      postLoading: false,\n      error: null\n    }\n    case PostActionTypes.FETCH_POST_FAILURE:\n    return {\n      ...state,\n      error: actions.payload.error\n    }\n    default: \n    return {\n      ...state\n    }\n  }\n}\n\nexport default posts;\n","const fakeAuth = {\n  signIn(cb: () => void) {\n    setTimeout(cb, 100)\n  },\n  signOut(cb: () => void) {\n    setTimeout(cb, 100)\n  },\n}\n\nexport default fakeAuth\n","import { useState } from 'react'\nimport fakeAuth from './fakeAuth'\n\nexport interface IUseAuthProvider {\n  user: null | string\n  signIn: (cb: () => void) => void\n  signOut: (cb: () => void) => void\n}\n\nconst useAuthProvider = (): IUseAuthProvider => {\n  const [user, setUser] = useState<null | string>(null)\n  const signIn = (cb: () => void) => {\n    fakeAuth.signIn(() => {\n      setUser('foo')\n      cb()\n    })\n  }\n  const signOut = (cb: () => void) => {\n    fakeAuth.signOut(() => {\n      setUser(null)\n      cb()\n    })\n  }\n\n  return {\n    user,\n    signIn,\n    signOut,\n  }\n}\n\nexport default useAuthProvider\n","import React, { createContext } from 'react'\nimport useAuthProvider, { IUseAuthProvider } from './useAuthProvider'\n\nexport const AuthContext = createContext<IUseAuthProvider | null>(null)\n\nconst AuthProvider: React.FC = ({ children }) => {\n  const auth = useAuthProvider()\n  return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>\n}\n\nexport default AuthProvider\n","// Will be updating  this file if needed\n\nfunction handleJSONResponse(response: any) {\n  return response.json().then((json: any) => {\n    if (response.ok) {\n      return json;\n    }\n    return Promise.reject(\n      Object.assign({}, json, {\n        status: response.status,\n        statusText: response.statusText\n      })\n    );\n  });\n}\n\nfunction handleTextResponse(response: any) {\n  return response.text().then((text: string) => {\n    if (response.ok) {\n      return text;\n    }\n    return Promise.reject({\n      status: response.status,\n      statusText: response.statusText,\n      err: text\n    });\n  });\n}\n\nfunction handleResponse(response: any) {\n  const contentType = response.headers.get(\"content-type\");\n  if (contentType.includes(\"application/json\")) {\n    return handleJSONResponse(response);\n  } else if (contentType.includes(\"text/html\")) {\n    return handleTextResponse(response);\n  } else if (contentType.includes(\"text/plain\")) {\n    return handleTextResponse(response);\n  } else if (contentType === null) {\n    return Promise.resolve(null);\n  }\n  // Other response types as necessary. I haven't found a need for them yet though.\n  throw new Error(`Sorry, content-type ${contentType} not supported`);\n}\n\nexport const GET = (url: string) =>\n  fetch(url, {\n    // credentials: \"include\"\n  })\n    .then(handleResponse)\n    .then(data => data)\n    .catch(error => error);\n\nexport const POST = (url: string, body: any) =>\n  fetch(url, {\n    credentials: \"include\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  })\n    .then(handleResponse)\n    .then(data => data)\n    .catch(error => error);\n\nexport const POST_FORM_DATA = (url: string, body: any) =>\n  fetch(url, {\n    credentials: \"include\",\n    method: \"POST\",\n    body\n  })\n    .then(handleResponse)\n    .then(data => data)\n    .catch(error => error);\n\nexport const PUT = (url: string, body: any) =>\n  fetch(url, {\n    method: \"PUT\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  })\n    .then(res => res.json())\n    .then(res => res);\n\nexport const PATCH = (url: string, body: any) =>\n  fetch(url, {\n    method: \"PATCH\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  })\n    .then(res => res.json())\n    .then(res => res);\n\nexport const DELETE = (url:string, body: any) =>\n  fetch(url, {\n    method: \"DELETE\",\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  })\n    .then(handleResponse)\n    .then(data => data)\n    .catch(error => error);\n","import { lazy } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom'\nimport constants from './utils/constants';\nconst PostPage = lazy(() => import('./pages/PostPage/PostPage'));\nconst LazyImages= lazy(() => import('./pages/LazyImages/LazyImages'));\nconst HomePage = lazy(() => import('./pages/HomePage/HomePage')); \nconst NoMatch = lazy(() => import('./pages/NoMatch/NoMatch'));\nconst LoginPage = lazy(() => import('./pages/LoginPage/LoginPage'));\nconst PrivateRoute = lazy(() => import('./auth/PrivateRoute'));\n\nconst Routes = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path={constants.routes.homePage}>\n          <HomePage />\n        </Route>\n        <Route path={constants.routes.login}>\n          <LoginPage />\n        </Route>\n        <Route path={constants.routes.lazyImage}>\n          <LazyImages />\n        </Route>\n        <PrivateRoute path={constants.routes.postPage}>\n          <PostPage />\n        </PrivateRoute>\n        <Route path={constants.routes.noMatch} component={NoMatch} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default Routes;","import React, { useState } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { Notification, NotificationLevel } from \"../../reducers/notificationReducer/notificationReducer\";\nimport \"./NotificationAlert.scss\";\ninterface NotificationAlertProps {\n  notification: Notification, \n    onClose?: any,\n    onHide?: any\n}\n\nfunction NotificationAlert(props: NotificationAlertProps): React.ReactElement {\n    const [show, setShow] = useState(true);\n    const variantFromLevel = (level : NotificationLevel) => {\n      switch(level) { \n        case NotificationLevel.Success: { \n          return 'success';\n        } \n        case NotificationLevel.Warning: { \n          return 'warning';\n        } \n        case NotificationLevel.Error: { \n          return 'danger';\n        } \n        case NotificationLevel.Info:\n        default: { \n          return 'info';\n        } \n      } \n    }\n  \n    const handleClick = () => {\n      setShow(false);\n      props.onClose();\n    };\n  \n    return(\n      <Alert \n        key={props.notification.id}\n        className='wrapper'\n        show={show}\n        variant={variantFromLevel(props.notification.level)} \n        onClose={() => handleClick()} \n        dismissible>\n        {props.notification.message}\n      </Alert>\n    );\n  }\n  \n  export default NotificationAlert;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Notification } from '../../reducers/notificationReducer/notificationReducer';\nimport NotificationAlert from './NotificationAlert';\nimport {toggleNotificationRead, selectUnreadNotifications } from '../../reducers/notificationReducer/notificationReducer';\nimport './NotificationQueue.scss';\n\ninterface NotificationQueueProps {\n  maxAlerts: number,\n}\n\nfunction NotificationQueue(props: NotificationQueueProps): React.ReactElement {\n  const allUnreadAlerts : Notification[] = useSelector(selectUnreadNotifications());\n  const alertsToShow = allUnreadAlerts.filter((notification: Notification, index: number) => index < props.maxAlerts)\n  const dispatch = useDispatch();\n  const handleOnCloseOrHide = (notification: Notification) => {\n    dispatch(toggleNotificationRead(notification.id))\n  };\n  return(\n    <div className=\"notificationQueue\">\n      {alertsToShow.reverse().map(notification => (\n        <NotificationAlert\n          key={notification.id}\n          notification={notification}\n          onClose={() => handleOnCloseOrHide(notification)} \n          onHide={() => handleOnCloseOrHide(notification)} \n        />\n      ))}\n    </div>\n  );\n}\n\nexport default NotificationQueue;\n","import { createContext, Suspense } from 'react';\nimport Routes from './Routes';\nimport AuthProvider from './auth/AuthProvider';\nimport NotificationQueue from './components/Notification/NotificationQueue';\n\n//Remember context can be used for easy pass of data\n//Use store only if necesary\nexport interface User {\n  id: number;\n  name: string;\n}\nconst user = {\n  id: 1,\n  name: \"Pulkit\"\n}\nexport const AuthContext = createContext<User | null>(null);\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <NotificationQueue maxAlerts={3}/>\n      <AuthContext.Provider value={user}>\n        <AuthProvider>\n          <Routes />\n        </AuthProvider>\n      </AuthContext.Provider>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { call, fork, takeLatest, all, put } from \"redux-saga/effects\";\nimport * as actions from \"../../reducers/postReducer/postReducer\";\nimport * as api from '../../api/api';\nimport constants from '../../utils/constants';\nimport { PostType } from '../../types/post';\nimport { addNotification, NotificationLevel } from '../../reducers/notificationReducer/notificationReducer';\n\n\nfunction* fetchPostSaga(action: any) {\n  try {\n    const res: PostType = yield call(api.GET, `${constants.apiRoutes.fetchPost}/${action.payload.postId}`);\n    console.log(\"res\", res);\n    if(res && res.status && res.status > 300) {\n      yield put(addNotification(\"Unable to fetch post\", NotificationLevel.Error));\n      yield put(actions.fetchPostFailure({error: `${res.status}`}))\n    } else {\n      yield put(actions.fetchPostSuccess(res))\n    }\n  } catch (error) {\n    const errorMessage =  error.message ? error.message.toString() : \"\"; \n    yield put(addNotification(errorMessage, NotificationLevel.Error));\n    yield put(actions.fetchPostFailure({error}))\n    yield console.log(error);\n  }\n}\n\nexport function* watchFetchPostSaga() {\n  yield takeLatest(actions.PostActionTypes.FETCH_POST_REQUEST, fetchPostSaga);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(watchFetchPostSaga)\n  ]);\n}","import { fork, all } from \"redux-saga/effects\";\nimport postSaga from './postSaga/postSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    fork(postSaga)\n  ]) \n}","import { combineReducers } from \"redux\";\nimport posts, {PostStore} from './postReducer/postReducer';\nimport notifications, { Notification } from './notificationReducer/notificationReducer';\n\nconst allReducers = combineReducers({\n  posts,\n  notifications\n});\n\ninterface CombinedStateType {\n  posts: PostStore;\n  notifications: Notification[];\n}\nconst rootReducer = (state: CombinedStateType|undefined, action: any): CombinedStateType => {\n  \n  return allReducers(state, action);\n}\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./reducers\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\nsagaMiddleware.run(rootSaga);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { RootState } from '../index';\nexport enum NotificationLevel {\n  Success = \"SUCCESS\",\n  Error = \"ERROR\",\n  Warning = \"WARNING\",\n  Info = \"INFO\"\n}\n\nexport interface Notification {\n  id: string;\n  message: string;\n  level: NotificationLevel;\n  read: boolean;\n}\n\nenum NotificationActionTypes {\n  ADD_NOTIFICATION = \"ADD_NOTIFICATION\",\n  TOGGLE_NOTIFICATION_READ = \"TOGGLE_NOTIFICATION_READ\"\n}\n\nexport const addNotification = (errorMessage: any, level: NotificationLevel) => ({\n  type: NotificationActionTypes.ADD_NOTIFICATION,\n  errorMessage,\n  level\n});\n\nexport const toggleNotificationRead = (id: string) => ({\n  type: NotificationActionTypes.TOGGLE_NOTIFICATION_READ,\n  id\n});\n\nconst initialState : Notification[] = [];\n\nlet nextTodoId = 0;\nconst notifications = (state: Array<Notification> = initialState, action: any) => {\n  switch(action.type) {\n    case NotificationActionTypes.ADD_NOTIFICATION:\n    const notification: Notification = {\n      id: '' + nextTodoId++,\n      message: action.errorMessage,\n      level: action.level,\n      read: false,\n    };\n    state.push(notification);\n    return state;\n    \n    case NotificationActionTypes.TOGGLE_NOTIFICATION_READ:\n    const newNotifications = state.map(notification => {\n      if(notification.id === action.id) {\n        notification.read = !notification.read\n      }\n      return notification;\n    });\n    return newNotifications;\n    default: \n    return initialState;\n  }\n}\nexport const selectUnreadNotifications = (): (state: RootState) => Notification[] => {\n  return (state: RootState): Notification[] => state.notifications.filter((notification: Notification) => !notification.read)\n}\n\nexport default notifications;\n\n"],"sourceRoot":""}